//
// Variables
// --------------------------------------------------
$frame-color:                   $body-color !default;
$frame-background:              transparent !default;
$frame-embedded-border-radius:  .5rem !default;
$frame-inner-spacing:           1.75rem !default;
$frame-inner-spacing-small:     .75rem !default;
$frame-inner-spacing-scaling:   () !default;
$frame-inner-spacing-scaling:   map-merge(
    (
        xs: 1,
        sm: 1.2,
        md: 1.3,
        lg: 1.4,
        xl: 1.5
    ),
    $frame-inner-spacing-scaling
);
$frame-backgrounds: () !default;
$frame-backgrounds: map-merge(
    (
        'primary': (
            'background':       $primary,
            'color':            color-contrast($primary),
            'link-color':       color-contrast($primary),
            'link-hover-color': color-contrast($primary)
        ),
        'primary-gradient': (
            'background':       linear-gradient(135deg, shade-color($primary, 15%) 15%, tint-color($primary, 15%)  85%),
            'color':            color-contrast($primary),
            'link-color':       color-contrast($primary),
            'link-hover-color': color-contrast($primary)
        ),
        'secondary': (
            'background':       $secondary,
            'color':            color-contrast($secondary),
            'link-color':       $link-color,
            'link-hover-color': $link-hover-color
        ),
        'secondary-gradient': (
            'background':       linear-gradient(135deg, shade-color($secondary, 15%) 15%, tint-color($secondary, 15%)  85%),
            'color':            color-contrast($secondary),
            'link-color':       $link-color,
            'link-hover-color': $link-hover-color
        ),
        'tertiary': (
            'background':       $tertiary,
            'color':            color-contrast($tertiary),
            'link-color':       $link-color,
            'link-hover-color': $link-hover-color
        ),
        'tertiary-gradient': (
            'background':       linear-gradient(135deg, shade-color($tertiary, 15%) 15%, tint-color($tertiary, 15%)  85%),
            'color':            color-contrast($tertiary),
            'link-color':       $link-color,
            'link-hover-color': $link-hover-color
        ),
        'quaternary': (
            'background':       $quaternary,
            'color':            color-contrast($quaternary),
            'link-color':       $link-color,
            'link-hover-color': $link-hover-color
        ),
        'quaternary-gradient': (
            'background':       linear-gradient(135deg, shade-color($quaternary, 15%) 15%, tint-color($quaternary, 15%)  85%),
            'color':            color-contrast($quaternary),
            'link-color':       $link-color,
            'link-hover-color': $link-hover-color
        ),
        'white': (
            'background':       #ffffff,
            'color':            color-contrast(#ffffff),
            'link-color':       $link-color,
            'link-hover-color': $link-hover-color
        ),
        'lighter': (
            'background':       $lighter,
            'color':            color-contrast($lighter),
            'link-color':       $link-color,
            'link-hover-color': $link-hover-color
        ),
        'light': (
            'background':       $light,
            'color':            color-contrast($light),
            'link-color':       $link-color,
            'link-hover-color': $link-hover-color
        ),
        'dark': (
            'background':       $dark,
            'color':            color-contrast($dark),
            'link-color':       $link-color,
            'link-hover-color': $link-hover-color
        ),
        'darker': (
            'background':       $darker,
            'color':            color-contrast($darker),
            'link-color':       $link-color,
            'link-hover-color': $link-hover-color
        ),
    ),
    $frame-backgrounds
);

//
// CSS Variables
// --------------------------------------------------
:root {
    --frame-color: #{$frame-color};
    --frame-link-color: #{$link-color};
    --frame-link-hover-color: #{$link-hover-color};
    --frame-background: #{$frame-background};
    --frame-spacing: #{$frame-inner-spacing};
    --frame-spacing-small: #{$frame-inner-spacing-small};
    --frame-embedded-border-radius: #{$frame-embedded-border-radius};
}
@each $breakpoint in map-keys($frame-inner-spacing-scaling) {
    :root {
        --frame-spacing-#{$breakpoint}: #{$frame-inner-spacing * map-get($frame-inner-spacing-scaling, $breakpoint)};
        --frame-spacing-small-#{$breakpoint}: #{$frame-inner-spacing-small * map-get($frame-inner-spacing-scaling, $breakpoint)};
    }
}

//
// Container
// --------------------------------------------------
.frame-container {
    position: relative;
    @include make-container();
    .page-main-container & {
        padding-left: 0;
        padding-right: 0;
    }
    &-default {
        @each $breakpoint, $container-max-width in $container-max-widths {
            @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
                max-width: $container-max-width;
            }
        }
    }
    &-full {
        max-width: 100%;
    }
    &-large {
        max-width: 1600px;
    }
    &-medium {
        max-width: 870px;
    }
    &-small {
        max-width: 600px;
    }
}

//
// Frame
// --------------------------------------------------
.frame {
    position: relative;
    padding-top: var(--frame-spacing);
    padding-bottom: var(--frame-spacing);
    color: var(--frame-color);
    background: var(--frame-background);
    a[class=""],
    a:not([class]) {
        color: var(--frame-link-color);
        &:hover {
            color: var(--frame-link-hover-color);
        }
    }
    @each $breakpoint in map-keys($frame-inner-spacing-scaling) {
        @include media-breakpoint-up($breakpoint) {
            --frame-spacing: var(--frame-spacing-#{$breakpoint});
        }
    }
}
.frame-inner {
    > *:last-child {
        margin-bottom: 0;
    }
}

//
// Layout
//
.frame-layout-embedded {
    background: transparent;
    .frame-group-container {
        @include make-container();
        @each $breakpoint, $container-max-width in $container-max-widths {
            @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
                max-width: $container-max-width;
            }
        }
        &-full {
            max-width: 100%;
        }
        &-large {
            max-width: 1600px;
        }
        &-medium {
            max-width: 870px;
        }
        &-small {
            max-width: 600px;
        }
    }
    .frame-group-inner {
        position: relative;
        border-radius: var(--frame-embedded-border-radius);
        background: var(--frame-background);
        padding: var(--frame-spacing);
    }
    .frame-container {
        padding: 0;
    }
    .frame-backgroundimage-container {
        border-radius: var(--frame-embedded-border-radius);
    }
}

//
// Frame Styles
// --------------------------------------------------
.frame-ruler-before {
    border-top: 1px solid rgba(0, 0, 0, .125);
    margin-top: 0;
}
.frame-ruler-after {
    border-bottom: 1px solid rgba(0, 0, 0, .125);
}
.frame-indent {
    .frame-inner {
        @each $breakpoint in map-keys($grid-breakpoints) {
            $i: index(map-keys($grid-breakpoints), $breakpoint);
            $i: $i - 1;
            @include media-breakpoint-up($breakpoint) {
                margin-left: $i * 5%;
                margin-right: $i * 5%;
            }
        }
    }
}
.frame-indent-left {
    .frame-inner {
        @each $breakpoint in map-keys($grid-breakpoints) {
            $i: index(map-keys($grid-breakpoints), $breakpoint);
            $i: $i - 1;
            @include media-breakpoint-up($breakpoint) {
                margin-left: $i * 10%;
            }
        }
    }
}
.frame-indent-right {
    .frame-inner {
        @each $breakpoint in map-keys($grid-breakpoints) {
            $i: index(map-keys($grid-breakpoints), $breakpoint);
            $i: $i - 1;
            @include media-breakpoint-up($breakpoint) {
                margin-right: $i * 10%;
            }
        }
    }
}

//
// Size
// --------------------------------------------------
.frame-size-small {
    @each $breakpoint in map-keys($frame-inner-spacing-scaling) {
        @include media-breakpoint-up($breakpoint) {
            --frame-spacing: var(--frame-spacing-small-#{$breakpoint});
        }
    }
}

//
// Height
// --------------------------------------------------
.frame-height-small,
.frame-height-medium {
    display: flex;
    .frame-container {
        display: flex;
        align-items: center;
    }
    .frame-inner {
        flex-grow: 1;
    }
}
.frame-height-small {
    min-height: 300px;
    @include media-breakpoint-up(md) {
        min-height: 400px;
    }
}
.frame-height-medium {
    min-height: 400px;
    @include media-breakpoint-up(md) {
        min-height: 500px;
    }
}
.frame-height-max {
    flex-grow: 1;
    display: flex;
    align-items: center;
}

//
// Background
// --------------------------------------------------
.container {
    .frame-has-backgroundimage,
    %frame-has-backgroundimage {
        @each $breakpoint in map-keys($frame-inner-spacing-scaling) {
            @include media-breakpoint-up($breakpoint) {
                $scaling: map-get($frame-inner-spacing-scaling, $breakpoint);
                padding-left: ($frame-inner-spacing * $scaling);
                padding-right: ($frame-inner-spacing * $scaling);
            }
        }
    }
}
@each $name, $settings in $frame-backgrounds {
    .frame-background-#{$name} {
        @extend %frame-has-backgroundimage;
        --frame-color: #{map-get($settings, 'color')};
        --frame-background: #{map-get($settings, 'background')};
        --frame-link-color: #{map-get($settings, 'link-color')};
        --frame-link-hover-color: #{map-get($settings, 'link-hover-color')};
    }
    .frame-size-default.frame-background-#{$name}:not(.frame-ruler-after):not(.frame-has-backgroundimage) +
    .frame-size-default.frame-background-#{$name}:not(.frame-ruler-before):not(.frame-has-backgroundimage) {
        margin-top: calc(-1 * var(--frame-spacing));
    }
}
.frame-layout-embedded:not(.frame-ruler-after) + .frame-layout-embedded:not(.frame-ruler-before) {
    margin-top: calc(-1 * var(--frame-spacing));
}

//
// Background Image
// --------------------------------------------------
.frame-backgroundimage-container {
    overflow: hidden;
}
.frame-backgroundimage-container,
.frame-backgroundimage {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background-position: center;
    background-size: cover;
}
.frame-backgroundimage-fade {
    opacity: .125;
}
.frame-backgroundimage-parallax {
    background-attachment: fixed;
    @media (hover: none) {
        background-attachment: initial;
    }
    background-repeat: no-repeat;
}
.frame-backgroundimage-blur {
    filter: blur(10px);
    width: calc(100% + 40px);
    height: calc(100% + 40px);
    top: -20px;
    left: -20px;
}
.frame-backgroundimage-grayscale {
    filter: grayscale(1);
}
.frame-backgroundimage-sepia {
    filter: sepia(1);
}

//
// Frame Header
// --------------------------------------------------
.frame-header {
    margin-bottom: $spacer;
    > *:last-child {
        margin-bottom: 0;
    }
}
.frame-header-permalink {
    position: relative;
    display: inline-flex;
    vertical-align: middle;
    color: inherit;
    opacity: .25;
    transition: opacity ease-in-out .3s;
    visibility: hidden;
    top: -.1em;
    &:hover {
        color: inherit;
        text-decoration: none;
        opacity: .75;
    }
}
*:hover > .frame-header-permalink {
    visibility: visible;
}
